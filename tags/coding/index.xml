<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on 1ミリもわからん</title><link>https://raahii.github.io/tags/coding/</link><description>Recent content in coding on 1ミリもわからん</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Tue, 03 Jan 2017 10:14:00 +0900</lastBuildDate><atom:link href="https://raahii.github.io/tags/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>「ヘルシープログラマ」を読んだ感想</title><link>https://raahii.github.io/2017/01/03/0103/</link><pubDate>Tue, 03 Jan 2017 10:14:00 +0900</pubDate><guid>https://raahii.github.io/2017/01/03/0103/</guid><description>ヘルシープログラマ ―プログラミングを楽しく続けるための健康Hack
作者: Joe Kutner,Sky株式会社玉川竜司 出版社/メーカー: オライリージャパン 発売日: 2015/07/23 メディア: 単行本（ソフトカバー） この商品を含むブログ (9件) を見る
感想 本書はプログラミングを職業とする人が、一日中座り続けるという習慣から慢性的に運動不足に陥ることの危険性や、よく引き起こす疾患の事例とその対策について説明している。一方、タイトルから匂い立つ&#34;プログラマは如何にして健康になれるか“というような方法論だけにとどまらず、単にプログラマとしてより良いパフォーマンスを発揮するためにどのように身体と付き合うべきかということも書いてある。
私は大学の図書館でたまたま本書を見つけ、また最近ではタイピングによって右手首に負担をかけていることを認識していたので手に取ったが、本書の前半で述べられている
「習慣」そのものについて 脳と身体の関係について プログラマがよく引き起こす疾患について などのトピックは、今現在なんらかの疾患に陥っている人や、いかにも不健康な見た目をした職業的プログラマだけでなく、デスクワークを日常的にする人なら誰が読んでもためになると感じたのでおすすめしたいと思った。
特に私の印象に残っているのは、ウォーキングが脳にもたらす効果について説明した2章である。1章で既に脳と身体のつながりについて触れられ、物理的な健康が頭脳に対して直接的にメリットをもたらすことが強調されている。そして2章では、フェルマーの最終定理に8年間注力し、実際にその証明を成し遂げたAndrew Wilesを例に、作業の前後にウォーキング（エクササイズ）を行うことで集中力、記憶力、創造力を高めることができると述べられている。
これは、プログラマがコードを夜遅くまでハックしたり、最新の技術書を読んだりすることと同様に、ウォーキングが我々の能力を強化するための最高の方法の一つであることを示している。
それ以外にも、習慣のメカニズムやスタンディングデスクの真実を知ることも出来る。これらは多くの人々が関心のある一般的なトピックだと思う。最後に、本書で紹介されていた健康のユニットテストに対する自分の状況をメモして、今後も意識したいと思う。
健康のユニットテスト 踊り場まで階段を上がると息が切れるか 1時間以上立ち上がることなく座り続けることが、日常的にあるか 昨年、仕事に差し支えるほどの腰痛、首痛、肩痛、手首痛が生じたことがあるか 先週、コンピュータの画面を見た時に、ドライアイ、目の充血や炎症、あるいは目の焦点を合わせづらくなったことがあったか 先月、苦しくなるほど食べすぎたことが複数階あったか 今日、直射日光に当たった時間は10分以下だったか 過去5年間に、虫歯の数は増えたか 見をかがめて靴紐を結ぶのは苦しいか 過去5年間でズボンのサイズが明らかに大きくなったか 目次 1章　変化を起こそう 2章　健康のブートストラップ 3章　椅子よさらば？ 4章　アジャイルなダイエット 5章　頭痛と眼精疲労の対策 6章　腰痛への対策 7章　手首痛への対策 8章　実践的なエクササイズ 9章　個室の外で考えよう 10章　健康のリファクタリング 11章　チームを作ろう 12章　進め、健康なプログラマ 追記 メモ。</description></item><item><title>リーダブル・コード(1)</title><link>https://raahii.github.io/2016/03/04/0304/</link><pubDate>Fri, 04 Mar 2016 13:54:00 +0900</pubDate><guid>https://raahii.github.io/2016/03/04/0304/</guid><description>私は現在，人に自分のコードを見てもらう機会はそう多くありません．しかし，今年度は卒業研究を行ったため，作ったプログラムを研究室に残す必要があり，どうせ残すなら読みやすいコードにしたいな，と思い本書を手に取りました．
リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)
作者: Dustin Boswell,Trevor Foucher,須藤功平,角征典 出版社/メーカー: オライリージャパン 発売日: 2012/06/23 メディア: 単行本（ソフトカバー） 購入: 68人 クリック: 1,802回 この商品を含むブログ (133件) を見る まず，私自身がもともとプログラミングする上でなんとなく意識していたことは次のようなことです．
変数名はより短くするよりも，より客観的に意味が通るものにすべき 変数や関数の命名法は統一すべき 処理は巧妙に短く書くのではなく，多少長くてもストレートに書くべき コメントは書いたほうが良い この内，日頃最も難しいと感じていた部分はやはり変数名です．客観的に意味の通るちょうどよい名前というのはそう簡単に思いつくものではなく，大体省略形にしたり，特に意味のない単語を割り当てたりしていました．
この記事では，「リーダブルコード」を読んで，特に自分が実践したいと思ったことについてまとめていきます．また，今回は「リーダブル・コード」の第一部のみをピックアップし，基本的には「表面的な部分を変更する」ことでよりコードをリーダブルにする方法をまとめたものです．
1. 命名はより的確な単語を使う それが思いつかないから困ってるという話なわけですが，ここで言いたいことは，すぐに思いつく「汎用的な単語」を安易に選択せず，より「限定的なニュアンスの単語」を選択するべきだということです．
例えば，
#インターネットからページ情報を取得する def GetPage(url): のような関数ならば，GetではなくFetchやDownloadを使うとわかりやすくなります．「取得する」んだからとりあえず…と汎用的な単語であるgetを使うと意味がぼやけるのです．他にも，
#textの最後を切り落として「．．．」をつける def Clip(text, length): のような関数では，よくあるlengthを引数として使ってしまいがちですが，長さ(length)の単位によってもっと具体的に
単位 引数 行数 row 文字数 char 単語数 word バイト数 byte などを使い分けるのが適切です．このように，より限定的な意味の単語を選択することで読み手の誤解を減らし，わかりやすくすることができます．自分は他にもmakeやconvertを多用する傾向にあるので気をつけたいです．</description></item><item><title>Pythonの日本語文字列</title><link>https://raahii.github.io/2015/06/28/0628/</link><pubDate>Sun, 28 Jun 2015 21:10:00 +0900</pubDate><guid>https://raahii.github.io/2015/06/28/0628/</guid><description>「研究者流コーディングの極意」を読んで、なんだかためになりそうだし、面白そうだし、ということで言語処理100本ノックを始めてみました。そして2つ目で詰まった(早い)。
使っている言語はPythonで、使い始めたばかりなのですが、そもそもプログラミングがダメダメです。
まず、その問題ですが、
&amp;lt;blockquote&amp;gt; &amp;lt;p&amp;gt;01. 「パタトクカシーー」&amp;lt;br&amp;gt; 「パタトクカシーー」という文字列の1,3,5,7文字目を取り出して連結した文字列を得よ．
&amp;lt;/blockquote&amp;gt; です。
まず私が考えたのは、こんな感じです。なんの疑問もなくこれでいけるだろうと思ってました笑。
string=&amp;ldquo;パタトクカシーー&amp;rdquo; rev=&amp;ldquo;&amp;rdquo; for i in [1,3,5,7]: rev+=string[i] print rev
一方結果は、
% python 01.「パタトクカシーー」.py �㿃 なんか文字化けしてる…。
それもそのはずで、「パタトクカシーー」は全て全角文字なのでひとひねり必要です。一般に半角は1byte、全角は2byteに符号化されているので、配列のお部屋と1:1対応にならないのが原因。
そしてPythonの場合、通常のstr型の全角文字は3byteに符号化されている（お部屋3つに対応している）みたいです。
&amp;gt;&amp;gt;&amp;gt; &amp;lsquo;あ&amp;rsquo;[0] &amp;lsquo;\xe3&amp;rsquo; &amp;gt;&amp;gt;&amp;gt; &amp;lsquo;あ&amp;rsquo;[1] &amp;lsquo;\x81&amp;rsquo; &amp;gt;&amp;gt;&amp;gt; &amp;lsquo;あ&amp;rsquo;[2] &amp;lsquo;\x82&amp;rsquo; &amp;gt;&amp;gt;&amp;gt; &amp;lsquo;あ&amp;rsquo;[3] Traceback (most recent call last): File &amp;ldquo;&amp;lt;stdin&amp;gt;&amp;rdquo;, line 1, in &amp;lt;module&amp;gt; IndexError: string index out of range この記事が参考になりました。qiita.com
これを知ったうえで愚直に書き換えると、
string=&amp;ldquo;パタトクカシーー&amp;rdquo; rev=&amp;ldquo;&amp;rdquo; for i in [1,3,5,7]: for j in range(3):#全角なので rev+=string[3*i+j] print rev</description></item></channel></rss>