<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>読書 on 1ミリもわからん</title><link>https://raahii.github.io/tags/%E8%AA%AD%E6%9B%B8/</link><description>Recent content in 読書 on 1ミリもわからん</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Tue, 03 Jan 2017 10:14:00 +0900</lastBuildDate><atom:link href="https://raahii.github.io/tags/%E8%AA%AD%E6%9B%B8/index.xml" rel="self" type="application/rss+xml"/><item><title>「ヘルシープログラマ」を読んだ感想</title><link>https://raahii.github.io/2017/01/03/101418/</link><pubDate>Tue, 03 Jan 2017 10:14:00 +0900</pubDate><guid>https://raahii.github.io/2017/01/03/101418/</guid><description>ヘルシープログラマ ―プログラミングを楽しく続けるための健康Hack
作者: Joe Kutner,Sky株式会社玉川竜司 出版社/メーカー: オライリージャパン 発売日: 2015/07/23 メディア: 単行本（ソフトカバー） この商品を含むブログ (9件) を見る
感想 本書はプログラミングを職業とする人が、一日中座り続けるという習慣から慢性的に運動不足に陥ることの危険性や、よく引き起こす疾患の事例とその対策について説明している。一方、タイトルから匂い立つ&#34;プログラマは如何にして健康になれるか“というような方法論だけにとどまらず、単にプログラマとしてより良いパフォーマンスを発揮するためにどのように身体と付き合うべきかということも書いてある。
私は大学の図書館でたまたま本書を見つけ、また最近ではタイピングによって右手首に負担をかけていることを認識していたので手に取ったが、本書の前半で述べられている
「習慣」そのものについて 脳と身体の関係について プログラマがよく引き起こす疾患について などのトピックは、今現在なんらかの疾患に陥っている人や、いかにも不健康な見た目をした職業的プログラマだけでなく、デスクワークを日常的にする人なら誰が読んでもためになると感じたのでおすすめしたいと思った。
特に私の印象に残っているのは、ウォーキングが脳にもたらす効果について説明した2章である。1章で既に脳と身体のつながりについて触れられ、物理的な健康が頭脳に対して直接的にメリットをもたらすことが強調されている。そして2章では、フェルマーの最終定理に8年間注力し、実際にその証明を成し遂げたAndrew Wilesを例に、作業の前後にウォーキング（エクササイズ）を行うことで集中力、記憶力、創造力を高めることができると述べられている。
これは、プログラマがコードを夜遅くまでハックしたり、最新の技術書を読んだりすることと同様に、ウォーキングが我々の能力を強化するための最高の方法の一つであることを示している。
それ以外にも、習慣のメカニズムやスタンディングデスクの真実を知ることも出来る。これらは多くの人々が関心のある一般的なトピックだと思う。最後に、本書で紹介されていた健康のユニットテストに対する自分の状況をメモして、今後も意識したいと思う。
健康のユニットテスト 踊り場まで階段を上がると息が切れるか 1時間以上立ち上がることなく座り続けることが、日常的にあるか 昨年、仕事に差し支えるほどの腰痛、首痛、肩痛、手首痛が生じたことがあるか 先週、コンピュータの画面を見た時に、ドライアイ、目の充血や炎症、あるいは目の焦点を合わせづらくなったことがあったか 先月、苦しくなるほど食べすぎたことが複数階あったか 今日、直射日光に当たった時間は10分以下だったか 過去5年間に、虫歯の数は増えたか 見をかがめて靴紐を結ぶのは苦しいか 過去5年間でズボンのサイズが明らかに大きくなったか 目次 1章　変化を起こそう 2章　健康のブートストラップ 3章　椅子よさらば？ 4章　アジャイルなダイエット 5章　頭痛と眼精疲労の対策 6章　腰痛への対策 7章　手首痛への対策 8章　実践的なエクササイズ 9章　個室の外で考えよう 10章　健康のリファクタリング 11章　チームを作ろう 12章　進め、健康なプログラマ 追記 メモ。</description></item><item><title>リーダブル・コード(1)</title><link>https://raahii.github.io/2016/03/04/135442/</link><pubDate>Fri, 04 Mar 2016 13:54:00 +0900</pubDate><guid>https://raahii.github.io/2016/03/04/135442/</guid><description>私は現在，人に自分のコードを見てもらう機会はそう多くありません．しかし，今年度は卒業研究を行ったため，作ったプログラムを研究室に残す必要があり，どうせ残すなら読みやすいコードにしたいな，と思い本書を手に取りました．
リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)
作者: Dustin Boswell,Trevor Foucher,須藤功平,角征典 出版社/メーカー: オライリージャパン 発売日: 2012/06/23 メディア: 単行本（ソフトカバー） 購入: 68人 クリック: 1,802回 この商品を含むブログ (133件) を見る まず，私自身がもともとプログラミングする上でなんとなく意識していたことは次のようなことです．
変数名はより短くするよりも，より客観的に意味が通るものにすべき 変数や関数の命名法は統一すべき 処理は巧妙に短く書くのではなく，多少長くてもストレートに書くべき コメントは書いたほうが良い この内，日頃最も難しいと感じていた部分はやはり変数名です．客観的に意味の通るちょうどよい名前というのはそう簡単に思いつくものではなく，大体省略形にしたり，特に意味のない単語を割り当てたりしていました．
この記事では，「リーダブルコード」を読んで，特に自分が実践したいと思ったことについてまとめていきます．また，今回は「リーダブル・コード」の第一部のみをピックアップし，基本的には「表面的な部分を変更する」ことでよりコードをリーダブルにする方法をまとめたものです．
1. 命名はより的確な単語を使う それが思いつかないから困ってるという話なわけですが，ここで言いたいことは，すぐに思いつく「汎用的な単語」を安易に選択せず，より「限定的なニュアンスの単語」を選択するべきだということです．
例えば，
#インターネットからページ情報を取得する def GetPage(url): のような関数ならば，GetではなくFetchやDownloadを使うとわかりやすくなります．「取得する」んだからとりあえず…と汎用的な単語であるgetを使うと意味がぼやけるのです．他にも，
#textの最後を切り落として「．．．」をつける def Clip(text, length): のような関数では，よくあるlengthを引数として使ってしまいがちですが，長さ(length)の単位によってもっと具体的に
単位 引数 行数 row 文字数 char 単語数 word バイト数 byte などを使い分けるのが適切です．このように，より限定的な意味の単語を選択することで読み手の誤解を減らし，わかりやすくすることができます．自分は他にもmakeやconvertを多用する傾向にあるので気をつけたいです．</description></item><item><title>人工知能とは</title><link>https://raahii.github.io/2015/11/14/174743/</link><pubDate>Sat, 14 Nov 2015 17:47:00 +0900</pubDate><guid>https://raahii.github.io/2015/11/14/174743/</guid><description>動機付け
最近、機械学習やディープラーンニングといった手法で人工知能研究が話題を集めている。特に今年学校で卒業研究が始まり、音声信号処理っぽいことをしているのだが、音声認識とか音声合成、声質変換あたりのこと調べると、すぐに統計的な手法に出会う。 例えば音声認識では、与えられた音声に対してそれが「あいうえお」のどの母音であるかをフォルマントという特徴量で判断したりするが、これを行うためには、あらかじめたくさんデータを用意して、第一フォルマントと第二フォルマントという特徴量の分布で、ここからここまでが「あ」ですよ、ここからは「い」ですよ、みたいな線引きをしてやらなければいけない。これはクラスタリング？という機械学習のアルゴリズムの一つだ。
はっきり言って、詳しいことは自分もわからないが、とにかくざっくりと「人工知能ってなんだ？」という質問にイメージをつけるべく、そのアウトラインをまとめようとこの文章を書いた。というのも、つい先日、「人工知能とか機械学習ってなんなの？」と聞かれ、「なんだろうね？笑」となってしまったのがきっかけである。
「人工知能は人間を超えるか」をざっくり　
人工知能は人間を超えるか ディープラーニングの先にあるもの (角川EPUB選書)
作者: 松尾豊 出版社/メーカー: KADOKAWA/中経出版 発売日: 2015/03/11 メディア: 単行本 この商品を含むブログ (8件) を見る 人工知能研究について 　そもそも、人工知能の定義とはなんだろう。これは専門家によってさまざまだが、一口に言えば「究極には人間と区別がつかない人工的な知能のこと」である。その人工知能を実現するために、さまざまな手法が考えられてきたわけだが、人工知能研究には現在までに3つのブームが存在したそうだ。これら3つこそが、人工知能をどのような手法で実現しようとしたのかを示す大きなまとまりになっている。これらを簡単にまとめることで、なんとなく機械学習やディープラーンニングが流行っている理由がわかるんじゃなかろうか。
第一のブーム 　1955~1970年頃のこと。その中身は主に推論と探索である。これは、いたってシンプルなルール によって現実の問題を解こうとするものである。
　ではいったいどんな問題を解いたのかというと、一つは迷路。これはスタート地点から考えられるすべての経路（場合分け）を順に調べることによってゴールを見つけるものである。主に探索木をモデルに用いていて、「深さ優先探索」や「幅優先探索」といったアルゴリズムが存在する。これらはわりと耳なじみがあると思う。他にも、ハノイの塔なども簡単に解ける。ハノイの塔にはちゃんとルールがあるので、それを満たすようにただシンプルな操作を繰り返すだけだ。
　一方、電脳戦で有名な将棋などのボードゲームに関しても、基本的に推論や探索で解く。しかしこの場合、「相手」がいることによって組み合わせが膨大になるため、すべての場合を列挙することは不可能だ。そのため、その時その時の盤面の状況に対して考えられる次の一手をすべて洗い出し、なんらかの評価手法でスコアをつけることによって最善に最善に手を打っていくことになる。これに関しては、盤面の評価に使用する特徴量(例えば飛車や角があるかないか、王がどこにいるか、など)が研究が進むにつれて良いものになっていったり、第3のブームで登場する機械学習を利用することによって現在も進化し続けているのだが、基本は推論、探索である。
　とにかく、単純な操作を多く繰り返す処理なら、パソコン用いた方が我々より早く正確であることは自明で、それを用いて賢く見せているにすぎない と言える(パソコン、インターネットが普及した今ではなんだか当たり前だけど)。お分かりのように、この推論や探索といった手法単体では、明確に定義されたルールの中で最適な解を求めることしかできず、いわゆるトイプロブレムは解けても、現実の複雑な問題を解くことはできない 。このような形で第一のブームは幕を閉じる。
第二のブーム 　1982~2000年くらいまで。その中身は機械に実践的な知識を持たせることである。第一のブームではシンプルな操作を繰り返すことがメインだったが、今度は必要な知識を機械に持たせることによってエキスパートシステムを作ろうと試みたのである。
　実際に開発されたエキスパートシステムには、1970年にスタンフォード大学でつくられたMYCINなどが挙げられる。MYCINは伝染病の血液疾患の患者を診断し、抗生物質を処方する、いわば専門医の代わりとなるシステムである。あらかじめ用意した500のルールに従って患者に質問を行い、条件分岐して患者が感染した細菌を特定し、適切な抗生物質を処方する。他にも、比較的最近話題となった、自分が思い浮かべたアニメキャラや有名人などを言い当てる「アキネイター」もこの種のシステムだろう。
　このようなエキスパートシステムを作るのには、知識を集めるためのコストがかかること、そして、知識が増えれば増えるほど、条件分岐が複雑かつ膨大になり、矛盾も発生するといった問題がついて回る。しかし、コンピュータの性能が日進月歩である今、それらは大した問題ではない。それよりも、次に上げる二つの致命的な問題がある。
　一つは、人間にとって常識レベルの知識が途方もなく膨大であるということである。例えば、機械翻訳をする時、&#34;He saw a woman in the garden with a telescope.&#34;という文章を日本語に訳そうとすると、in the gardenとwith a telescopeの節がHeにかかるのかwomanにかかるのか一意に定まらない。しかし、人間であれば常識的に「彼は望遠鏡で庭にいる女性を見た。」と訳すことができる。このように、エキスパートシステムを拡張させ、より柔軟なものにしようとした時、そこには「常識的な判断」というものが必要不可欠になるが、それが非常に難しかったのである。</description></item></channel></rss>