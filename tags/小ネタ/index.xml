<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>小ネタ on 1ミリもわからん</title><link>https://raahii.github.io/tags/%E5%B0%8F%E3%83%8D%E3%82%BF/</link><description>Recent content in 小ネタ on 1ミリもわからん</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Sat, 01 Jul 2017 23:12:00 +0900</lastBuildDate><atom:link href="https://raahii.github.io/tags/%E5%B0%8F%E3%83%8D%E3%82%BF/index.xml" rel="self" type="application/rss+xml"/><item><title>LaTeXiTで数式が表示されない問題</title><link>https://raahii.github.io/2017/07/01/231213/</link><pubDate>Sat, 01 Jul 2017 23:12:00 +0900</pubDate><guid>https://raahii.github.io/2017/07/01/231213/</guid><description>LaTeXiTはTeX数式を画像に変換できるツールですが、ついさっき使ったらプレビューに数式が表示されず、というか数式画像の生成自体に失敗しているみたいで全く使えないという事態に遭遇しました。
思い当たったのは最近brew updateした時にghostscriptがアップデートされたことだったので確認。
brew info ghostscript ghostscript: stable 9.21 (bottled), HEAD Interpreter for PostScript and PDF https://www.ghostscript.com/ /usr/local/Cellar/ghostscript/9.21_1 (8,484 files, 98.2MB) Poured from bottle on 2017-05-23 at 13:32:45 /usr/local/Cellar/ghostscript/9.21_2 (717 files, 64MB) * Poured from bottle on 2017-06-22 at 00:29:33 From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/ghostscript.rb ==&amp;gt; Dependencies Build: pkg-config ✔ Required: little-cms2 ✔ ==&amp;gt; Requirements Optional: x11 ✔ ==&amp;gt; Options --with-x11 Build with x11 support --HEAD Install HEAD version 確かに06/22に更新している。なんとなく怪しいのでバージョンを下げたらなおった。</description></item><item><title>imgcatコマンドで遊ぶ</title><link>https://raahii.github.io/2016/09/21/231012/</link><pubDate>Wed, 21 Sep 2016 23:10:00 +0900</pubDate><guid>https://raahii.github.io/2016/09/21/231012/</guid><description>近況
インターンに行ってJavaを用いたWebアプリケーション開発を経験してきました。
もともとサーバーサイドの方の知識は0に近く、データベースとかサーバーってめんどくさそう…くらいの認識でした。今回その辺りのコーディングをいくつか担当させて頂き、Webアプリの全体像が見えた気がします。とりあえず、Webアプリ開発を一通り経験したというのはとても大きな意味がありました。
また、チーム開発が初めてだったこともあり、Gitを初めて実践的に使った他、かんばんやKPTといったアジャイル的な開発手法にも触れられたのも楽しかったです。
imgcatコマンド がらっと話は変わりますが本題。みなさんimgcatというコマンドをご存知でしょうか。おそらくiTerm上でしか動かない…と思いますが、ターミナル上で画像を表示するコマンドです。
これ、一見ネタのようなコマンドですが、Qiitaにはこんな記事が投稿されています。
qiita.com
いや、やっぱりネタかもしれない。
こんなimgcatですが、もしかしたらこれってすごい力を秘めているのではないかと私は思いました。というのも、黒い画面というのはどうしても地味になりがちで、長時間コーディングをすると精神的に良くないと感じるからです。これを使えばもしかしたらターミナルが賑やかになるかもしれない...！
GIPHYからGIF画像を取得して表示する ということで、いつまでも自分の手元にある画像を見ていても面白くないのでネットから拾ってきます。最初はGoogle画像検索を使おうと思っていましたが、最終的にGIPHYというサイトのAPIを使ってGIF画像を取ることにしました。そうです、imgcatでGIF画像を表示するとちゃんと動くんです！できたものはこんな感じ。
猫。
ピカチュウ。
カートマン。
GIPHYは海外サイトなので日本語では検索できませんが、結構素材は豊富っぽいです。
ソースコード Pythonで書きました。簡単ですが...。 コレくらいだったらwgetとかでワンライナーで書けたりしそう。どうだろう。
手順はこんな感じです。
コマンドライン引数で検索ワードを受け取る
GIPHYのAPIを使って画像を検索し、結果からランダムに一つをピックアップする
選んだ画像のURLにHTTPリクエストを投げてかえってきた画像データをそのままバイナリで標準出力に流す
imgcatにリダイレクトする
GIPHYのAPIはGoogleのCustom Search APIと違って（おそらく）制限がないのと、現在public beta keyを出してくれてるので使うのが楽でした。
また、今回使った検索以外にもトレンドの画像の取得や絵文字からGIFへの変換など色々できるようで今度使ってみたいなと思います。
応用例 さて、そもそもこれを作ったワケというのは、黒い画面を眺め続け疲弊した心に安らぎをあたえてやることでした。
一つ考えた例としてgit commitする度に好きなテーマの画像が表示されるようにします。zshrcに以下を追加。
すると…
予想外に地味😇。　今回は検索ワードを&#34;LGTM&#34;にしましたが、猫でいいかも。git commitをmycommitに置き換えなきゃいけないのはスマートじゃないですね。
ということで、みなさんもくれぐれも心のケアは大切にして下さい（適当）。
終わりに こういうの作ってる最中はいいんだけど、作り終わった後の賢者タイムの辛さ…ね…。
所感 拾ってくる画像
Twitterからとってきても面白いかも。
最後の使い方の例のところ改良の余地有り
元々git commitしたら画像を表示するというのは、たまたま見かけたcdしたらlsするという記事にヒントを得たものでした。なので本当はgit commit() { \gitcommit &#34;</description></item><item><title>Chrome extensionに入門した</title><link>https://raahii.github.io/2016/08/12/002118/</link><pubDate>Fri, 12 Aug 2016 00:21:00 +0900</pubDate><guid>https://raahii.github.io/2016/08/12/002118/</guid><description>http://dotinstall.com/lessons/basic_chrome_v2dotinstall.com
前回の記事でスターをつけてくださった方のブログを眺めていたらChromeの拡張機能を作っていて、Chromeの拡張機能ってHTML/CSS/JSだけで作れるのか！ということを知りました。せっかくの機会なので入門して自分なりに簡単な拡張機能を作ってみました。
モチベーション シンプルにChromeを使っていて不便だと思う部分を解決するために作りました。
私の考える問題点 例えば、Chromeでブラウジングしていて、最初はあることについて調べていたんだけど、気づいたら全く違うテーマのページを開いていた、なんてことありませんか？特に自分は学校の課題で調べ事してたんだけど退屈すぎていつの間にかネットサーフィンしてた、みたいなのがよくあります。
そんな時、そのウィンドウには、もともと調べていたテーマに関するタブと、新しく調べ始めたテーマに関するタブが混在してしまっている状態です。こういう時、テーマによってウィンドウを分けたくなります。そんなときみなさんどうしますか？単純にやるとこう↓なりませんか。
（左側3つのタブと右側2つのタブを切り分ける様子）
このようにブラウザって複数のタブに対してはあまり柔軟に操作できないなと感じます。とくにウィンドウをまたぐと辛い。そこでタブ（ウィンドウ）操作を柔軟にする拡張機能をつくりました。 つくったもの github.com
　そのような流れでChrome拡張機能の入門として↑を作りました。インポートすると右上にタブっぽいアイコンが出てきますので、これをクリックすると使うことができます。この拡張機能は、タブのかたまりに対して主に分割する機能（split）と、保存する機能（store、bookmark）で合計3つの機能を備えています。
split: 現在開いているタブを含め右側のタブを新しいウィンドウで開く
一つのウィンドウに存在する異なるテーマのタブ群を分割(split)します。splitボタンを押すと、今開いている(activeな)タブを含め、そこから右側にあるタブを新しいウィンドウで開きます。
store: 今開いているウィンドウをWebStorageに一時保存
保存したいタブ群をまずsplitで切り出した後に、保存したいウィンドウでstoreボタンを押すとあなたのlocalStorageにウィンドウが保存されます。
他のデバイスで見たりするわけじゃないけど、少しの間しまっておきたい時に使います。取り出すときは、先ほどのstoreボタンがretrieveボタンになっているのでそれを押して下さい。
bookmark: 今開いているウィンドウのタブを全てブックマークする
store機能は使っている端末のlocalStorageに保存するので、他の端末では開くことができません。もちろんスマホのChromeでは拡張機能自体が使えないので共有できません。そんなとき今開いているウィンドウの全てのタブを一括ブックマークできるのがbookmarkボタンです。
bookmarkボタンを押すとパスの設定画面が現れます。新しいフォルダ名とそのフォルダをどこに置くかを決めてsaveボタンを押してください。もしフォルダ名が空であった場合、新しくフォルダは作らずそのまま展開してブックマークされます。
課題 store機能の改善
保持したウィンドウの情報を見れる機能、もう要らないって場合に捨てられる機能があったらよいかも。
splitできるならjoinも？
splitの逆で複数のwindowを1つにまとめられる機能があってもよいかも。
バグの修正
初回のウィンドウに限ってsplitがうまく動かない時がある。 jsの非同期処理による弊害をあんまり考慮せず作ったのでそのあたりを見直したい。 popup.htmlを改良する
最低限のデザインにしていきたいんだけど、レイアウトの仕方について要勉強。この手のページを作るとき、大体HTML/CSSを書くのにJavaScriptと同じくらい時間かかるのもどうにかしたい。 名前
tabs_splitterなんかしっくりこない。英語的にもおかしい気がするしtabをキーワードとして残したい。
所感 ボタンの名前をどう表記するのがベスト？
単に split？それとももっと詳しく open right tabs in a new window？あるいは日本語で ◯◯◯？どれがわかりやすいんだろう。</description></item><item><title>Google Maps APIを使った標高の可視化</title><link>https://raahii.github.io/2016/07/24/155027/</link><pubDate>Sun, 24 Jul 2016 15:50:00 +0900</pubDate><guid>https://raahii.github.io/2016/07/24/155027/</guid><description>タイトルの通りGoogle Maps APIを使って、出発地点から目的地点までの高低差を可視化する簡単なサイトを作ってみました。
ルートに沿った標高の可視化
github.com
きっかけとしては、新生活に伴い、家から大学までのルートの高低差を知りたかったからです。
個人的な話ですが、今年から大学に進学しまして一人暮らしを始めました。一人暮らしにあたっては家賃はもちろんですが、家から学校までの距離が一つ重要な要素ですよね。近いに越したことはないとは思いますが、スーパーやコンビニのあるなしで利便性が大きく変わるので、少々遠くても自転車で通えればOKです。まぁ10km前後になると夏は汗だくで授業を受けるはめになりますが...。
そんなとき、加えて重要なのが、高低差じゃないでしょうか。アップダウンが激しいと辛いですよね。そんな具合で春頃に実際にそれを調べたいなと思った時、何故かそういうサービスがあまりなかったのでGoogle Maps APIを使って自分で作って可視化してみてました。
最近ではロードバイクやクロスバイクに乗る人が増えて、ランニングする人も多くなってきているので、結構使いたい人はいるんじゃないかと思っています。元々自分なりに春先には作っていたものを綺麗にしてWebサイト作りの練習として公開してみました。とはいってもHTML/CSS/JSだけの本当に簡単な試作品のレベルですが。
先ほど言ったとおり、このサイトではGoogle Maps APIを使っていて、出発地と目的地を入力すると自動でルート検索が行われて、ルートに沿った高低差が可視化されます。もともとそういう関数があるのでものすごく実装は簡単なんですが、ルートにそって高低差が出せるってとこが重要です。APIは無料で使う分にはup to 25,000 map loads per dayなのでサービスとしてはちゃんとしたものはできていませんが、今後ルートの候補を選べるようにしたり、ルートごとの高低差の違いを同時に見れたりしたら便利かなと思っています。
とまぁ、そんなこんなで最近はWeb系に興味がでてきたので、夏に集中的に勉強できたらなと思います。制作実績がないとインターンも厳しいので、コツコツ夏に勉強して冬のインターンを狙っていきたいと思います。それでは。
今よくよく探してみると、
地図検索 - NAVITIME
ルートラボ - LatLongLab
Flattest Route
と、機能や完成度・他サービスとの連携はまちまちですが既存のものも意外にありますね。(笑)
NAVITIMEは坂の少ない／多いルートを選べ、かつ所要時間も出ていて素晴らしいです。ただちょっと図が小さめ。ルートラボはパッと検索するというよりは、ユーザー同士が作ったルートをシェアできる機能があって独特なサービスです。Flattest Routeはなんか動かない。とはいえ、今回の題材はコンセプトとしては意外と悪くなかったかなと思います。</description></item><item><title>外部モニターで動画を見ると辛い</title><link>https://raahii.github.io/2016/06/23/172816/</link><pubDate>Thu, 23 Jun 2016 17:28:00 +0900</pubDate><guid>https://raahii.github.io/2016/06/23/172816/</guid><description>こんにちは。EURO2016盛り上がってますね。みなさん見ていますか。明後日からはトーナメントが始まりますが僕の予想はコレです。
フランス優勝とイタリアが勝ち上がるとこがミソです。山が違っていたら決勝はイタリアvsフランスにしてました。まぁぼく欧州サッカー全然知りませんけど笑
という感じで、最近はEURO2016の試合ハイライトをよく見るのですが、動画鑑賞においてはMacbook Airが思ったより非力で辛いです。
特に、外部モニタで視聴すると、うなる。
ちなみに自分のMBAは2013年モデルの11インチで、cpuはi7の方なのですが、普通にMacのモニタで見ている分には特にcpu（ファン）は暴走しません。反対に、外部接続しているモニタは23インチで、これで見ているとcpuファンがかなり回り始めます。でかいモニタを使うとやはりレンダリングとかの関係で重いんですかね？
ということで、ちょっと気になったので簡単に可視化してみました。
方法はMacモニタと外部モニタでそれぞれ動画を最大化して視聴し、cpu使用率を計測します。ちなみにGoogle Chromeでニコニコ動画を見ました🍺。シンプル。
一応少し頑張ってスクリプトを…。cpu使用率を取得するのはshellscriptで、グラフ化はpythonでやりました。
んで結果、Macモニタの場合 外部モニタの場合
という感じでした。グラフの背景が白で汚い…。
とりあえず、外部モニタの場合，Macのモニタに比べて30%近くcpu使用率が高いという結果に。今回はMacを起動した後に、GoogleChromeだけを立ち上げて動画を視聴という流れで揃えたので、これでもcpu使用率は差が出てない方だと思います。普段からなんとなーくアクティビティモニタを開いて見たりしていますが、他のタブや他のアプリケーションを同時に開いていると、二倍近く差が出る時もあった気がします。やっぱりcpuが非力だと外部モニタって負荷でかいんですね…。
あと、MacはIntelのcpuを積んでいるので、いい感じにオーバークロックして処理性能を上げる「Turbo Boost」という機能がついているみたい。ただ、排熱効率に優れないMacの場合これが原因でcpu温度がみるみる上昇していきます。cpu負荷が大きいプロセスを実行すると、このおせっかい機能によって熱暴走がおきてcpuファンの回転に拍車をかける─ これも原因の一つかなぁ。まぁそんな感じです。
あと今回書いたスクリプトの方は、シェルスクリプトでpsコマンドの出力をcutできなくてちょっと躓きました。結局awkで解決したので、もっとawkを使いこなしたい。あと、シェルスクリプトはスペースが入る文字列を扱うときにわけわからなくなったりするので&#34;と&#39;の違いとかをちゃんと覚えないとダメかも。日頃からもっと頻繁に書いていきたいです。
Pythonの方は去年一年間使ったのでわりとスラスラ書けた。最近はC/C++ばっかり使っているのであれだけど、やっぱりメソッドチェーンは慣れないと読みづらい気がする。matplotlibはとても使いやすいので好き。
grep,sed,awk
作者: 美吉明浩 出版社/メーカー: 秀和システム 発売日: 1998/05/29 メディア: 単行本 この商品を含むブログを見る
コレ読みたい。それでは。</description></item><item><title>Macならできること　ぱーと１</title><link>https://raahii.github.io/2016/06/05/234239/</link><pubDate>Sun, 05 Jun 2016 23:42:00 +0900</pubDate><guid>https://raahii.github.io/2016/06/05/234239/</guid><description>飯を食いながら記事が読みたい．でもご飯を口に入れながら上目遣いでディスプレイを見たり，片手にスマホを持ちながらみたいなのは嫌だという方．
まず，必要に応じてイヤホンをしましょう． 読みたい記事のテキストを選択しクリップボードにコピーしましょう． ターミナルでpbpaste | sayとタイプしましょう． 以上です．高品質な音声合成技術に感謝しましょう． [補足]
読み上げ時の声質を変更したい方はそういったことも可能です． ちょっと打つのがめんどくさいなという人はecho &#39;alias yomiage=&#34;pbpaste | say&#34;&#39; &amp;gt;&amp;gt; ~/.zshrcなどしましょう． そうMacなら，ね．</description></item><item><title>Wordで上下の余白が消えてしまった時</title><link>https://raahii.github.io/2016/05/30/102550/</link><pubDate>Mon, 30 May 2016 10:25:00 +0900</pubDate><guid>https://raahii.github.io/2016/05/30/102550/</guid><description>昨日Word (2016 for Mac)を開いたら画像のように余白が消えて見えなくなってしまっている。 一応余白自体は存在しているらしいが上にスクロールできず、切れてしまっている模様。
解決策はギリギリ見えている余白のところをダブルクリック（これだけ）！
一応ググると下記の記事がヒットする。ここではWordの設定を変更しているみたいだが、Word 2016 for Macにはないので注意。
Wordの上下の余白が消えてしまった場合の対処方法
これ何かの便利機能なのだとしたら意図的にそうする方法を知りたかったり。またWordのおせっかい機能だとしたら激おこ😡ですな。</description></item></channel></rss>