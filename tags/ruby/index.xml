<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ruby on 1ミリもわからん</title><link>https://raahii.github.io/tags/ruby/</link><description>Recent content in ruby on 1ミリもわからん</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Thu, 04 May 2017 01:03:00 +0900</lastBuildDate><atom:link href="https://raahii.github.io/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Ruby(Rails)でGoogle Analytics APIを使う</title><link>https://raahii.github.io/posts/ruby-google-analytics-api/</link><pubDate>Thu, 04 May 2017 01:03:00 +0900</pubDate><guid>https://raahii.github.io/posts/ruby-google-analytics-api/</guid><description>今回RubyでGoogle Analytics APIを利用する機会があったのですが、思ったより情報が少ない上、必要な鍵ファイルやトークンがよくわからず時間を取られたので以下に手順をまとめておきます。
Developers Consoleでプロジェクト作成・APIを有効化 まずはおなじみのやつですが、Googleのセットアップツールを利用するとパパッと完了できます。画面の表示に従ってプロジェクト作成→認証情報に進む→OAuthクライアント作成→完了と進めます。
注意してほしいのが認証情報のところで、自分は以下のようにしました。最後の認証情報のダウンロードは不要です。
サービスアカウントの作成 次にサービスアカウントページを開いて、プロジェクトを選択→サービス アカウントを作成→（サービス アカウントの名前を入力）→新しい秘密鍵の提供→作成を順にクリックします。公開キーと秘密キーのペアが生成されるので、client_secrets.p12というファイル名で保存します。
また、サービスアカウントのIDを次で使うのでコピーしておいて下さい。
Googleアナリティクスのユーザーにサービスアカウントを追加する 準備作業の最後として、アナリティクスデータの表示と分析の権限をサービスアカウントに付与します。自分のGoogleアナリティクスのページを開き、左タブの管理＞ビューの列のユーザー管理に進み、権限を付与するユーザーとして先ほどのサービスアカウントのIDを入力して追加します。
また管理＞ビュー設定にあるビューIDをこの後使うのでコピーしておいて下さい。
必要なパッケージをインストール RailsであればGemfileに追記します。
gem &#39;google-api-client&#39;, &#39;~&amp;gt; 0.11&#39; bundle install 単にターミナルから使うのであれば以下。
gem install google-api-client キーと設定ファイルを配置 そうしたら、ga_config.ymlという名前でyamlファイルを作成し、中身を記述します。以下を自分の情報と置き換えて下さい。
サービスアカウントのID:
Google Developers Consoleの左上のハンバーガーメニュー＞IAMと管理＞サービスアカウントで確認できます。
アナリティクスのビューID:
自分のアナリティクスのアカウントより、左タブ＞管理（歯車アイコン）＞ビュー設定より確認できます。
サービスアカウントのキー:
サービスアカウント作成の時に得たclient_secrets.p12を適当に配置してパスを記述します。
サービスアカウントのキーのパスワード:
特別設定していなければ&#39;notasecret&#39;のままでOKです。
データを取得 以下がメインのスクリプトです。そのまま使う場合はとりあえずga_config.ymlやclient_secrets.p12と同ディレクトリに置くと動くと思います。
start_dateやend_date、metrics、dimension、sortなどは必要に応じて変更して下さい。データの取得方法は共通だと思うので下記など他の情報を参照して下さい。
github.com
Railsアプリで使う場合 今回紹介したのはただのスクリプトですが、例えばランキングを作りたいといった場合にはアクセス数を利用してモデルに順位を付与したいと思います。そこで使えるのが、Railsの環境を読み込んだ上で任意のRubyコードが実行できるrails runnerです。またそういった独自のスクリプトみたいなものはlib/tasksに配置してrakeタスクとして使うほうが正しそう(?)です。またgithubで公開する場合などはキーファイルなどをリポジトリに含めないように注意して下さい。</description></item><item><title>Rubyの文法のミニメモ</title><link>https://raahii.github.io/posts/ruby-language-features/</link><pubDate>Thu, 22 Dec 2016 01:18:00 +0900</pubDate><guid>https://raahii.github.io/posts/ruby-language-features/</guid><description>Railsでサービス作ってみたは良いものの、Rubyに関する理解が結構おろそかになっている。なので、今回は基本的だけど未だに理解できていない部分を簡単にまとめる。
Rubyはすべてがオブジェクト Rubyに入門すると一度は耳にする「Rubyは完全にオブジェクト指向的な言語である」という文言。入門したときはあまり深く考えていなかったので、よく考えると「いやいやPythonにだってクラスはあるんだからオブジェクト指向は使えるじゃん」とか思っていた。Pythonのオブジェクト指向は後付けのものだということを聞いたことがあるので、まぁそんな程度の違いだろうという曖昧な理解だった。
しかし、改めて調べてみてRubyが完全にオブジェクト指向的であることが簡単にわかる例があったので書いておく。
# Rubyが完全にオブジェクト指向的であるというということは # 1などの定値もオブジェクトになっているということ p 1.class # =&amp;gt; Fixnum # 1がオブジェクトならmethodを持っているよね p 1.methods # =&amp;gt; [:%, :&amp;amp;, :*, :+, ・・・] # +というメソッドがあるなら足し算はこう書ける p 1.+(1) #=&amp;gt; 2 # 数字がオブジェクトのおかげでこういうRubyらしい書き方ができる 10.times {|i| print i} # =&amp;gt; 0123456789 なるほど。これで前よりは少し理解が進んだ。
シンボルとハッシュ Rubyにはシンボルという型がある。:(変数名)で定義でき、注意点は
:symbol == :&#34;symbol&#34; # =&amp;gt; true となること。
このシンボルであるが、よくハッシュで使われる。ハッシュはkeyとvalueで構成され、一般的にkeyは文字列で定義される。
しかし、keyを文字列として扱うと、valueを参照（keyの識別）する際にコストの高い文字列処理を行わなければならなくなる。ここでシンボルである。
端的にいうと、シンボルは任意の名前をつけることの出来る整数である。例えば:symbolというシンボルはなんらかの整数と紐付けられており、常に一定となっている。よってシンボルをkeyとすることで、文字列処理を行わなければ行けなかったところを、コストの低い整数処理に置き換えることが出来る。
わかりやすい例として、以下のようなコードを実行してみると、同じ文字列でも異なるオブジェクトidとなることがわかる。異なるオブジェクトなのだから当然といえば当然である。
a = &#34;test&#34; b = &#34;test&#34; a.equal?(b) # =&amp;gt; false 一方、シンボルはオブジェクトによらない。
a = :test b = :test a.</description></item><item><title>Fashion Shop Mapというwebサービスをつくった</title><link>https://raahii.github.io/posts/web-service-fashion-shop-map/</link><pubDate>Sat, 26 Nov 2016 01:36:00 +0900</pubDate><guid>https://raahii.github.io/posts/web-service-fashion-shop-map/</guid><description>タイトルの通りwebサービス作りました。またしてもGoogle Mapを使ってしまった。
https://fashion-shop-map.herokuapp.com/
サービス概要 今回作ったものは、ファッションのショップの位置情報を検索することができるサービスです。これを使うことで、複数のショップの位置を同時に地図にプロットして見ることができます。
ユーザーの操作はとてもシンプルで、検索したいショップと都道府県を選択してボタンを押すと、選択された都道府県内にある店舗が地図上にマッピングされます。
機能としてはシングルページのwebサイトに近いくらいシンプルです。現在は主にセレクトショップを取り扱っており、以下のようなショップが登録されています。
ロゴ 名前 ロゴ 名前 BEAMS UNITED ARROWS UNITED ARROWS BEAUTY&amp;amp;YOUTH UNITED ARROWS green label relaxing URBAN RESEARCH URBAN RESEARCH DOORS SHIPS EDIFICE 417 EDIFICE JOURNAL STANDARD coen A.P.C. BShop SENSE OF PLACE by URBAN RESEARCH HARE RAGEBLUE GLOBAL WORK FREAK&#39;S STORE モチベーション まず服が好きなので、それに関わるサービスを作りたいなと思っていました。</description></item><item><title>最近の開発環境におけるTips</title><link>https://raahii.github.io/posts/recent-reports-sep/</link><pubDate>Fri, 30 Sep 2016 02:02:00 +0900</pubDate><guid>https://raahii.github.io/posts/recent-reports-sep/</guid><description>近況
夏休みが今週いっぱいで終わる 今週rubyとrailsに入門した 開発環境 ruby、railsは現在チュートリアルをやってるような感じで特に書くことはないのだけれど、それらを始めてから急に同時に多くのファイルを編集する機会が多くなってきました。なので、最近気づいたコードを書くときのコツ、vimのいい感じの使い方を少しメモしておきます。
① NERDTreeと画面分割を使う プロジェクトのルートでNerdTreeを開きながら水平分割(s)を使うといろんなファイルをすぐ開けて便利です。加えてNERDTreeはファイルの作成/削除などの基本操作もできるのでvimの中で結構完結します。
② タブページ機能を使ってファイルをうまく仕分ける Model、View、Controller、設定ファイルといったコードのかたまりをタブを利用して分けてあげると使いやすい。もちろんタブ間の移動は使いやすいキーにバインドしておく必要があります。ファイルを新しいタブで開くときもNERDTreeはtでできるので楽ちんです。
③ 作業の中断・開始にはセッションを使う これまで書いたようにファイルは整理しながらたくさん開くので、必然的にその状況を保存したいなぁとなります。以下の記事にわかりやすく書いてあるのですが、vimでは:mksで現在開いているバッファやウィンドウの状態を保存してくれます。記事では~/.Session.vimに保存されると書いてあるのですが、私の環境では標準でカレントディレクトリ（./Session.vim）に作成されました。この方がわかりやすいので私は好きです。 keyamb.hatenablog.com
④ エディタとシェルはもう分けちゃったほうがよい vimを開いている状態からrailsやgitのコマンドを打つためにシェルに戻るのは結構めんどくさいです。今までは:shellと打って抜けるやり方が好きでしたが、最近vimを抜けてからzshが入力を受け付けるまでが結構遅いことに気づき、iTermのウィンドウをそもそも分けることにしました。zshがちょっと重いらしく、あんまり使いこなせてもいないのでbashにしようかなと思ってます。あと、VimShellとかfugitiveはあんまり合いませんでした。
所感 やっぱり大きめのモニタあると捗る エディタとシェルを分けちゃうとvimの存在意義が薄れてきている気が vimは操作といい色々柔軟できるけどそろそろIDEも試してみようかな…</description></item></channel></rss>