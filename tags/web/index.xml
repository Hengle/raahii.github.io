<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web on 1ミリもわからん</title><link>https://raahii.github.io/tags/web/</link><description>Recent content in web on 1ミリもわからん</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Thu, 04 May 2017 01:03:00 +0900</lastBuildDate><atom:link href="https://raahii.github.io/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Ruby(Rails)でGoogle Analytics APIを使う</title><link>https://raahii.github.io/2017/05/04/0504/</link><pubDate>Thu, 04 May 2017 01:03:00 +0900</pubDate><guid>https://raahii.github.io/2017/05/04/0504/</guid><description>今回RubyでGoogle Analytics APIを利用する機会があったのですが、思ったより情報が少ない上、必要な鍵ファイルやトークンがよくわからず時間を取られたので以下に手順をまとめておきます。
Developers Consoleでプロジェクト作成・APIを有効化 まずはおなじみのやつですが、Googleのセットアップツールを利用するとパパッと完了できます。画面の表示に従ってプロジェクト作成→認証情報に進む→OAuthクライアント作成→完了と進めます。
注意してほしいのが認証情報のところで、自分は以下のようにしました。最後の認証情報のダウンロードは不要です。
サービスアカウントの作成 次にサービスアカウントページを開いて、プロジェクトを選択→サービス アカウントを作成→（サービス アカウントの名前を入力）→新しい秘密鍵の提供→作成を順にクリックします。公開キーと秘密キーのペアが生成されるので、client_secrets.p12というファイル名で保存します。
また、サービスアカウントのIDを次で使うのでコピーしておいて下さい。
Googleアナリティクスのユーザーにサービスアカウントを追加する 準備作業の最後として、アナリティクスデータの表示と分析の権限をサービスアカウントに付与します。自分のGoogleアナリティクスのページを開き、左タブの管理＞ビューの列のユーザー管理に進み、権限を付与するユーザーとして先ほどのサービスアカウントのIDを入力して追加します。
また管理＞ビュー設定にあるビューIDをこの後使うのでコピーしておいて下さい。
必要なパッケージをインストール RailsであればGemfileに追記します。
gem &#39;google-api-client&#39;, &#39;~&amp;gt; 0.11&#39; bundle install 単にターミナルから使うのであれば以下。
gem install google-api-client キーと設定ファイルを配置 そうしたら、ga_config.ymlという名前でyamlファイルを作成し、中身を記述します。以下を自分の情報と置き換えて下さい。
サービスアカウントのID:
Google Developers Consoleの左上のハンバーガーメニュー＞IAMと管理＞サービスアカウントで確認できます。
アナリティクスのビューID:
自分のアナリティクスのアカウントより、左タブ＞管理（歯車アイコン）＞ビュー設定より確認できます。
サービスアカウントのキー:
サービスアカウント作成の時に得たclient_secrets.p12を適当に配置してパスを記述します。
サービスアカウントのキーのパスワード:
特別設定していなければ&#39;notasecret&#39;のままでOKです。
データを取得 以下がメインのスクリプトです。そのまま使う場合はとりあえずga_config.ymlやclient_secrets.p12と同ディレクトリに置くと動くと思います。
start_dateやend_date、metrics、dimension、sortなどは必要に応じて変更して下さい。データの取得方法は共通だと思うので下記など他の情報を参照して下さい。
github.com
Railsアプリで使う場合 今回紹介したのはただのスクリプトですが、例えばランキングを作りたいといった場合にはアクセス数を利用してモデルに順位を付与したいと思います。そこで使えるのが、Railsの環境を読み込んだ上で任意のRubyコードが実行できるrails runnerです。またそういった独自のスクリプトみたいなものはlib/tasksに配置してrakeタスクとして使うほうが正しそう(?)です。またgithubで公開する場合などはキーファイルなどをリポジトリに含めないように注意して下さい。</description></item><item><title>Fashion Shop Mapというwebサービスをつくった</title><link>https://raahii.github.io/2016/11/26/1126/</link><pubDate>Sat, 26 Nov 2016 01:36:00 +0900</pubDate><guid>https://raahii.github.io/2016/11/26/1126/</guid><description>タイトルの通りwebサービス作りました。またしてもGoogle Mapを使ってしまった。
https://fashion-shop-map.herokuapp.com/
サービス概要 今回作ったものは、ファッションのショップの位置情報を検索することができるサービスです。これを使うことで、複数のショップの位置を同時に地図にプロットして見ることができます。
ユーザーの操作はとてもシンプルで、検索したいショップと都道府県を選択してボタンを押すと、選択された都道府県内にある店舗が地図上にマッピングされます。
機能としてはシングルページのwebサイトに近いくらいシンプルです。現在は主にセレクトショップを取り扱っており、以下のようなショップが登録されています。
ロゴ 名前 ロゴ 名前 BEAMS UNITED ARROWS UNITED ARROWS BEAUTY&amp;amp;YOUTH UNITED ARROWS green label relaxing URBAN RESEARCH URBAN RESEARCH DOORS SHIPS EDIFICE 417 EDIFICE JOURNAL STANDARD coen A.P.C. BShop SENSE OF PLACE by URBAN RESEARCH HARE RAGEBLUE GLOBAL WORK FREAK&#39;S STORE モチベーション まず服が好きなので、それに関わるサービスを作りたいなと思っていました。</description></item><item><title>ロゴの利用について少し調べて学んだこと</title><link>https://raahii.github.io/2016/11/17/1117/</link><pubDate>Thu, 17 Nov 2016 20:41:00 +0900</pubDate><guid>https://raahii.github.io/2016/11/17/1117/</guid><description>はじめに
今作っているちんけなwebサービスがほとんど出来上がって久しいきたのですが、よし公開するかと思った矢先、「サービスにメーカーのロゴが使われているってまずいのではないか」という疑問が湧き、何故今まで気づかなかったのかと愕然としました。
情報系の学部に通っていると知的財産権に関わる授業を受けますが、そういう系の授業は大体「睡眠薬がまかれたのではないか」という有様なので、内容についてはあまり記憶がないです笑。ただ、授業のおかげでそういうセンサーが少しでも芽生えたかもしれないことは良いことだと思います。
とにかく、いくらミニマムなサービスだとしても作り手としては留意すべき点だし、今後にも役立つだろうと思い少しだけ調べたので、簡単にまとめようと思います。
ロゴに関わる権利とは 私は最初、著作権が問題になるのではないかと思いました。ところが、調べてみるとどうやら商標法なるものが問題となるようでした。商標法とは、名の通り商標登録されたものを保護するための法であり、まさにロゴのことでした。
そもそも、商標法より先に例えばマクドナルドのページの利用規約などを見てみると、
5 . 知的財産権について
当サービスのすべてのコンテンツ（著作物、肖像、キャラクター、その他の一切の情報）は、当社もしくは、その委託先等が著作権等の知的財産権、使用権、その他の権利を有しています。著作権法で認められている範囲を超えての使用はお控え下さい。
6 . 禁止事項
当サービスのご利用にあたり、利用者は以下の行為を行わないものとします。違反した場合には、当サービスの利用を予告なくお断りさせていただく場合がありますので、あらかじめご了承下さい。
（中略）
(2) 特許権、実用新案権、商標権、意匠権、著作権、著作隣接権、肖像権、トレードシークレット、プライバシー、その他他者の権利、財産を侵害する行為、または侵害するおそれのある行為。
というような記載があります。これらはどのサイトでも必ずある記載で、「ア、オワタな」と一瞬思ったのですが、もう少し調べることにしました。
商標としての使用であるか否かが重要 調べ続けるうちに、弁護士・弁理士の方にアドバイスをもらえるQ&amp;amp;Aサイトのページがいくつかヒットしました。眺めていると「ロゴの使用が『商標としての使用』に該当しなければ問題ない」というような書き込みを発見。
詳しく調べると、「自他商品識別機能、出所表示機能等を有するような使用の仕方でなければその商標権を侵害しているとはいえない」ということがわかりました。
これを私の理解でざっくりいうと、商標法の侵害に当たるのは「他者が登録した商標を用いて、自分のサービス（商品）に付し、商標（めじるし）として使うこと」だと言えます。よって、ロゴを用いてサービスを作ったとしても、それが明らかにそのメーカーについて言及した記述や説明に過ぎないという場合は問題にならないということです。良かった…。
ロゴの著作権は？ とりあえず、明らかに商標法に抵触していることはなさそうだということがわかりましたが、それでは著作権はどうなのかと思ったのでこれも調べました。調べるとすぐにこんな記事が。
www.nikkeibp.co.jp
これによると、
著作権は、「感情または思想を創作的に表現したもの」で「文芸・学術・美術・音楽」に発生する権利で、著作物を創作した時点で著作者に自動的に発生するとされています。
（中略）
次に、商標について考えてみます。商標とは、シンボルマーク、ロゴタイプ、ロゴマーク、キャラクター、特徴的な商品のデザイン、看板など、企業の商品やサービスを他社と区別するためのもので、「企業の業務上の信用」を視覚化したものだととらえられています。商標法により、商標権の保護対象となるもので、商標権が登録され設定されている期間、専有的にこれを使用することができます。
「商標」には種類があり、扱いが異なります。アルファベットなどの文字で構成されるロゴタイプ、ロゴマークは、基本的に著作権は認められていません（「Asahiロゴマーク事件」）。ただし、商標のうち「シンボルマーク」にはその美的表現の程度により著作権が発生する場合があり、「キャラクター」には著作権が発生するとされています。熊本県のキャラクター「くまモン」は、著作権を買い上げた県が著作権使用料を無料にしたことで、さまざまな商品に展開されました（使用には県の許可が必要です）。
と書かれており、基本的には商標は著作権では保護できないため気にする必要はないようです。ただ、ロゴにキャラクターが載っている場合は注意が必要みたいですね。そんなに多いケースではないと思うのでひとまず安心です。
さいごに 商標について気になったので調べてみました。結果、ちゃんと商標法の条文を読んだわけではありませんが「どうやら問題なさそうだ」ぐらいはわかりました。
また、もし近い将来一エンジニアとして会社に勤めることになれば、真摯に取り組まなければならないテーマだということも感じました。これからも個人的に何かを作るときには、想像力を働かせて、少しでもその場で調べる癖を習慣にしていければと思いましたまる
参考 ホームページ上でのロゴ使用について・・・ - 特許・商標・著作権 - 専門家プロファイル
商標権侵害の考え方～アウトライン・「使用」の意義 | 弁護士法人クラフトマン IT・技術・特許・商標に強い法律事務所(東京丸の内・横浜)
ロゴマークに著作権はない──企業デザインと知的財産権 | 小さな組織の未来学</description></item><item><title>最近の開発環境におけるTips</title><link>https://raahii.github.io/2016/09/30/0930/</link><pubDate>Fri, 30 Sep 2016 02:02:00 +0900</pubDate><guid>https://raahii.github.io/2016/09/30/0930/</guid><description>近況
夏休みが今週いっぱいで終わる 今週rubyとrailsに入門した 開発環境 ruby、railsは現在チュートリアルをやってるような感じで特に書くことはないのだけれど、それらを始めてから急に同時に多くのファイルを編集する機会が多くなってきました。なので、最近気づいたコードを書くときのコツ、vimのいい感じの使い方を少しメモしておきます。
① NERDTreeと画面分割を使う プロジェクトのルートでNerdTreeを開きながら水平分割(s)を使うといろんなファイルをすぐ開けて便利です。加えてNERDTreeはファイルの作成/削除などの基本操作もできるのでvimの中で結構完結します。
② タブページ機能を使ってファイルをうまく仕分ける Model、View、Controller、設定ファイルといったコードのかたまりをタブを利用して分けてあげると使いやすい。もちろんタブ間の移動は使いやすいキーにバインドしておく必要があります。ファイルを新しいタブで開くときもNERDTreeはtでできるので楽ちんです。
③ 作業の中断・開始にはセッションを使う これまで書いたようにファイルは整理しながらたくさん開くので、必然的にその状況を保存したいなぁとなります。以下の記事にわかりやすく書いてあるのですが、vimでは:mksで現在開いているバッファやウィンドウの状態を保存してくれます。記事では~/.Session.vimに保存されると書いてあるのですが、私の環境では標準でカレントディレクトリ（./Session.vim）に作成されました。この方がわかりやすいので私は好きです。 keyamb.hatenablog.com
④ エディタとシェルはもう分けちゃったほうがよい vimを開いている状態からrailsやgitのコマンドを打つためにシェルに戻るのは結構めんどくさいです。今までは:shellと打って抜けるやり方が好きでしたが、最近vimを抜けてからzshが入力を受け付けるまでが結構遅いことに気づき、iTermのウィンドウをそもそも分けることにしました。zshがちょっと重いらしく、あんまり使いこなせてもいないのでbashにしようかなと思ってます。あと、VimShellとかfugitiveはあんまり合いませんでした。
所感 やっぱり大きめのモニタあると捗る エディタとシェルを分けちゃうとvimの存在意義が薄れてきている気が vimは操作といい色々柔軟できるけどそろそろIDEも試してみようかな…</description></item><item><title>Chrome extensionに入門した</title><link>https://raahii.github.io/2016/08/12/0812/</link><pubDate>Fri, 12 Aug 2016 00:21:00 +0900</pubDate><guid>https://raahii.github.io/2016/08/12/0812/</guid><description>http://dotinstall.com/lessons/basic_chrome_v2dotinstall.com
前回の記事でスターをつけてくださった方のブログを眺めていたらChromeの拡張機能を作っていて、Chromeの拡張機能ってHTML/CSS/JSだけで作れるのか！ということを知りました。せっかくの機会なので入門して自分なりに簡単な拡張機能を作ってみました。
モチベーション シンプルにChromeを使っていて不便だと思う部分を解決するために作りました。
私の考える問題点 例えば、Chromeでブラウジングしていて、最初はあることについて調べていたんだけど、気づいたら全く違うテーマのページを開いていた、なんてことありませんか？特に自分は学校の課題で調べ事してたんだけど退屈すぎていつの間にかネットサーフィンしてた、みたいなのがよくあります。
そんな時、そのウィンドウには、もともと調べていたテーマに関するタブと、新しく調べ始めたテーマに関するタブが混在してしまっている状態です。こういう時、テーマによってウィンドウを分けたくなります。そんなときみなさんどうしますか？単純にやるとこう↓なりませんか。
（左側3つのタブと右側2つのタブを切り分ける様子）
このようにブラウザって複数のタブに対してはあまり柔軟に操作できないなと感じます。とくにウィンドウをまたぐと辛い。そこでタブ（ウィンドウ）操作を柔軟にする拡張機能をつくりました。 つくったもの github.com
　そのような流れでChrome拡張機能の入門として↑を作りました。インポートすると右上にタブっぽいアイコンが出てきますので、これをクリックすると使うことができます。この拡張機能は、タブのかたまりに対して主に分割する機能（split）と、保存する機能（store、bookmark）で合計3つの機能を備えています。
split: 現在開いているタブを含め右側のタブを新しいウィンドウで開く
一つのウィンドウに存在する異なるテーマのタブ群を分割(split)します。splitボタンを押すと、今開いている(activeな)タブを含め、そこから右側にあるタブを新しいウィンドウで開きます。
store: 今開いているウィンドウをWebStorageに一時保存
保存したいタブ群をまずsplitで切り出した後に、保存したいウィンドウでstoreボタンを押すとあなたのlocalStorageにウィンドウが保存されます。
他のデバイスで見たりするわけじゃないけど、少しの間しまっておきたい時に使います。取り出すときは、先ほどのstoreボタンがretrieveボタンになっているのでそれを押して下さい。
bookmark: 今開いているウィンドウのタブを全てブックマークする
store機能は使っている端末のlocalStorageに保存するので、他の端末では開くことができません。もちろんスマホのChromeでは拡張機能自体が使えないので共有できません。そんなとき今開いているウィンドウの全てのタブを一括ブックマークできるのがbookmarkボタンです。
bookmarkボタンを押すとパスの設定画面が現れます。新しいフォルダ名とそのフォルダをどこに置くかを決めてsaveボタンを押してください。もしフォルダ名が空であった場合、新しくフォルダは作らずそのまま展開してブックマークされます。
課題 store機能の改善
保持したウィンドウの情報を見れる機能、もう要らないって場合に捨てられる機能があったらよいかも。
splitできるならjoinも？
splitの逆で複数のwindowを1つにまとめられる機能があってもよいかも。
バグの修正
初回のウィンドウに限ってsplitがうまく動かない時がある。 jsの非同期処理による弊害をあんまり考慮せず作ったのでそのあたりを見直したい。 popup.htmlを改良する
最低限のデザインにしていきたいんだけど、レイアウトの仕方について要勉強。この手のページを作るとき、大体HTML/CSSを書くのにJavaScriptと同じくらい時間かかるのもどうにかしたい。 名前
tabs_splitterなんかしっくりこない。英語的にもおかしい気がするしtabをキーワードとして残したい。
所感 ボタンの名前をどう表記するのがベスト？
単に split？それとももっと詳しく open right tabs in a new window？あるいは日本語で ◯◯◯？どれがわかりやすいんだろう。</description></item><item><title>Google Maps APIを使った標高の可視化</title><link>https://raahii.github.io/2016/07/24/0724/</link><pubDate>Sun, 24 Jul 2016 15:50:00 +0900</pubDate><guid>https://raahii.github.io/2016/07/24/0724/</guid><description>タイトルの通りGoogle Maps APIを使って、出発地点から目的地点までの高低差を可視化する簡単なサイトを作ってみました。
ルートに沿った標高の可視化
github.com
きっかけとしては、新生活に伴い、家から大学までのルートの高低差を知りたかったからです。
個人的な話ですが、今年から大学に進学しまして一人暮らしを始めました。一人暮らしにあたっては家賃はもちろんですが、家から学校までの距離が一つ重要な要素ですよね。近いに越したことはないとは思いますが、スーパーやコンビニのあるなしで利便性が大きく変わるので、少々遠くても自転車で通えればOKです。まぁ10km前後になると夏は汗だくで授業を受けるはめになりますが...。
そんなとき、加えて重要なのが、高低差じゃないでしょうか。アップダウンが激しいと辛いですよね。そんな具合で春頃に実際にそれを調べたいなと思った時、何故かそういうサービスがあまりなかったのでGoogle Maps APIを使って自分で作って可視化してみてました。
最近ではロードバイクやクロスバイクに乗る人が増えて、ランニングする人も多くなってきているので、結構使いたい人はいるんじゃないかと思っています。元々自分なりに春先には作っていたものを綺麗にしてWebサイト作りの練習として公開してみました。とはいってもHTML/CSS/JSだけの本当に簡単な試作品のレベルですが。
先ほど言ったとおり、このサイトではGoogle Maps APIを使っていて、出発地と目的地を入力すると自動でルート検索が行われて、ルートに沿った高低差が可視化されます。もともとそういう関数があるのでものすごく実装は簡単なんですが、ルートにそって高低差が出せるってとこが重要です。APIは無料で使う分にはup to 25,000 map loads per dayなのでサービスとしてはちゃんとしたものはできていませんが、今後ルートの候補を選べるようにしたり、ルートごとの高低差の違いを同時に見れたりしたら便利かなと思っています。
とまぁ、そんなこんなで最近はWeb系に興味がでてきたので、夏に集中的に勉強できたらなと思います。制作実績がないとインターンも厳しいので、コツコツ夏に勉強して冬のインターンを狙っていきたいと思います。それでは。
今よくよく探してみると、
地図検索 - NAVITIME
ルートラボ - LatLongLab
Flattest Route
と、機能や完成度・他サービスとの連携はまちまちですが既存のものも意外にありますね。(笑)
NAVITIMEは坂の少ない／多いルートを選べ、かつ所要時間も出ていて素晴らしいです。ただちょっと図が小さめ。ルートラボはパッと検索するというよりは、ユーザー同士が作ったルートをシェアできる機能があって独特なサービスです。Flattest Routeはなんか動かない。とはいえ、今回の題材はコンセプトとしては意外と悪くなかったかなと思います。</description></item></channel></rss>