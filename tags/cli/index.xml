<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cli on 1ミリもわからん</title><link>https://raahii.github.io/tags/cli/</link><description>Recent content in cli on 1ミリもわからん</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Wed, 26 Oct 2016 11:10:00 +0900</lastBuildDate><atom:link href="https://raahii.github.io/tags/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>find | xargs grep を知る</title><link>https://raahii.github.io/2016/10/26/1026/</link><pubDate>Wed, 26 Oct 2016 11:10:00 +0900</pubDate><guid>https://raahii.github.io/2016/10/26/1026/</guid><description>はじめに
今回は頻繁につかうのに理解していないスクリプトがあるのでそれについて簡単に書こうと思います。そのスクリプトがコレです。
find . -name &#34;*.py&#34; -print0 | xargs -0 grep -i &#34;pync&#34; どんなことをするスクリプトかご存知ですか？
これはカレントディレクトリ以下にあるファイル*.pyの中からpyncという単語を含むものをリストアップするワンライナーです。すなわちこういうことです。
find . -name &#34;&amp;lt;検索対象のファイルネーム&amp;gt;&#34; -print0 | xargs -0 grep -i &#34;&amp;lt;探したい単語&amp;gt;&#34; 前から何度か使っていたものの、たまにしか使わないしすぐ忘れるだろうということで、すぐにシェルスクリプトファイルで保存し「ブラックボックス化」していました。最近になって特に多用するようになってきたのでちゃんと理解しようと思います。
解読 まず、パイプの左側のfindの部分について。
find . -name &#34;&amp;lt;検索対象のファイルネーム&amp;gt;&#34; -print0 言わずもがなfind .でカレントディレクトリ以下の全てのディレクトリ・ファイルを列挙します。よくファイルを探す時に使いますね。
そして -name &#34;*.&amp;lt;拡張子&amp;gt;&#34;とすることで検索対象のファイルを限定します。ファイルをたくさん持つディレクトリを検索するのであれば時間を短縮できます。加えてこれを使わずに実行すると、サブディレクトリもリストアップされてしまい、パイプ以降に渡されるとエラーを起こします。結果が見づらくなるのでそれを防止する効果もありますね。
最後に-print0ですがこれは全く使ったことのないオプションだったのでmanで見てみると、
-print0 This primary always evaluates to true. It prints the pathname of the current file to standard output, followed by an ASCII NUL character (character code 0).</description></item><item><title>imgcatコマンドで遊ぶ</title><link>https://raahii.github.io/2016/09/21/0921/</link><pubDate>Wed, 21 Sep 2016 23:10:00 +0900</pubDate><guid>https://raahii.github.io/2016/09/21/0921/</guid><description>近況
インターンに行ってJavaを用いたWebアプリケーション開発を経験してきました。
もともとサーバーサイドの方の知識は0に近く、データベースとかサーバーってめんどくさそう…くらいの認識でした。今回その辺りのコーディングをいくつか担当させて頂き、Webアプリの全体像が見えた気がします。とりあえず、Webアプリ開発を一通り経験したというのはとても大きな意味がありました。
また、チーム開発が初めてだったこともあり、Gitを初めて実践的に使った他、かんばんやKPTといったアジャイル的な開発手法にも触れられたのも楽しかったです。
imgcatコマンド がらっと話は変わりますが本題。みなさんimgcatというコマンドをご存知でしょうか。おそらくiTerm上でしか動かない…と思いますが、ターミナル上で画像を表示するコマンドです。
これ、一見ネタのようなコマンドですが、Qiitaにはこんな記事が投稿されています。
qiita.com
いや、やっぱりネタかもしれない。
こんなimgcatですが、もしかしたらこれってすごい力を秘めているのではないかと私は思いました。というのも、黒い画面というのはどうしても地味になりがちで、長時間コーディングをすると精神的に良くないと感じるからです。これを使えばもしかしたらターミナルが賑やかになるかもしれない...！
GIPHYからGIF画像を取得して表示する ということで、いつまでも自分の手元にある画像を見ていても面白くないのでネットから拾ってきます。最初はGoogle画像検索を使おうと思っていましたが、最終的にGIPHYというサイトのAPIを使ってGIF画像を取ることにしました。そうです、imgcatでGIF画像を表示するとちゃんと動くんです！できたものはこんな感じ。
猫。
ピカチュウ。
カートマン。
GIPHYは海外サイトなので日本語では検索できませんが、結構素材は豊富っぽいです。
ソースコード Pythonで書きました。簡単ですが...。 コレくらいだったらwgetとかでワンライナーで書けたりしそう。どうだろう。
手順はこんな感じです。
コマンドライン引数で検索ワードを受け取る
GIPHYのAPIを使って画像を検索し、結果からランダムに一つをピックアップする
選んだ画像のURLにHTTPリクエストを投げてかえってきた画像データをそのままバイナリで標準出力に流す
imgcatにリダイレクトする
GIPHYのAPIはGoogleのCustom Search APIと違って（おそらく）制限がないのと、現在public beta keyを出してくれてるので使うのが楽でした。
また、今回使った検索以外にもトレンドの画像の取得や絵文字からGIFへの変換など色々できるようで今度使ってみたいなと思います。
応用例 さて、そもそもこれを作ったワケというのは、黒い画面を眺め続け疲弊した心に安らぎをあたえてやることでした。
一つ考えた例としてgit commitする度に好きなテーマの画像が表示されるようにします。zshrcに以下を追加。
すると…
予想外に地味😇。　今回は検索ワードを&#34;LGTM&#34;にしましたが、猫でいいかも。git commitをmycommitに置き換えなきゃいけないのはスマートじゃないですね。
ということで、みなさんもくれぐれも心のケアは大切にして下さい（適当）。
終わりに こういうの作ってる最中はいいんだけど、作り終わった後の賢者タイムの辛さ…ね…。
所感 拾ってくる画像
Twitterからとってきても面白いかも。
最後の使い方の例のところ改良の余地有り
元々git commitしたら画像を表示するというのは、たまたま見かけたcdしたらlsするという記事にヒントを得たものでした。なので本当はgit commit() { \gitcommit &#34;</description></item></channel></rss>