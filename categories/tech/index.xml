<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on 1ミリもわからん</title><link>https://raahii.github.io/categories/tech/</link><description>Recent content in tech on 1ミリもわからん</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Thu, 22 Dec 2016 01:18:00 +0900</lastBuildDate><atom:link href="https://raahii.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Rubyの文法のミニメモ</title><link>https://raahii.github.io/2016/12/22/011842/</link><pubDate>Thu, 22 Dec 2016 01:18:00 +0900</pubDate><guid>https://raahii.github.io/2016/12/22/011842/</guid><description>Railsでサービス作ってみたは良いものの、Rubyに関する理解が結構おろそかになっている。なので、今回は基本的だけど未だに理解できていない部分を簡単にまとめる。
Rubyはすべてがオブジェクト Rubyに入門すると一度は耳にする「Rubyは完全にオブジェクト指向的な言語である」という文言。入門したときはあまり深く考えていなかったので、よく考えると「いやいやPythonにだってクラスはあるんだからオブジェクト指向は使えるじゃん」とか思っていた。Pythonのオブジェクト指向は後付けのものだということを聞いたことがあるので、まぁそんな程度の違いだろうという曖昧な理解だった。
しかし、改めて調べてみてRubyが完全にオブジェクト指向的であることが簡単にわかる例があったので書いておく。
# Rubyが完全にオブジェクト指向的であるというということは # 1などの定値もオブジェクトになっているということ p 1.class # =&amp;gt; Fixnum # 1がオブジェクトならmethodを持っているよね p 1.methods # =&amp;gt; [:%, :&amp;amp;, :*, :+, ・・・] # +というメソッドがあるなら足し算はこう書ける p 1.+(1) #=&amp;gt; 2 # 数字がオブジェクトのおかげでこういうRubyらしい書き方ができる 10.times {|i| print i} # =&amp;gt; 0123456789 なるほど。これで前よりは少し理解が進んだ。
シンボルとハッシュ Rubyにはシンボルという型がある。:(変数名)で定義でき、注意点は
:symbol == :&#34;symbol&#34; # =&amp;gt; true となること。
このシンボルであるが、よくハッシュで使われる。ハッシュはkeyとvalueで構成され、一般的にkeyは文字列で定義される。
しかし、keyを文字列として扱うと、valueを参照（keyの識別）する際にコストの高い文字列処理を行わなければならなくなる。ここでシンボルである。
端的にいうと、シンボルは任意の名前をつけることの出来る整数である。例えば:symbolというシンボルはなんらかの整数と紐付けられており、常に一定となっている。よってシンボルをkeyとすることで、文字列処理を行わなければ行けなかったところを、コストの低い整数処理に置き換えることが出来る。
わかりやすい例として、以下のようなコードを実行してみると、同じ文字列でも異なるオブジェクトidとなることがわかる。異なるオブジェクトなのだから当然といえば当然である。
a = &#34;test&#34; b = &#34;test&#34; a.equal?(b) # =&amp;gt; false 一方、シンボルはオブジェクトによらない。
a = :test b = :test a.</description></item><item><title>Fashion Shop Mapというwebサービスをつくった</title><link>https://raahii.github.io/2016/11/26/013603/</link><pubDate>Sat, 26 Nov 2016 01:36:00 +0900</pubDate><guid>https://raahii.github.io/2016/11/26/013603/</guid><description>タイトルの通りwebサービス作りました。またしてもGoogle Mapを使ってしまった。
https://fashion-shop-map.herokuapp.com/
サービス概要 今回作ったものは、ファッションのショップの位置情報を検索することができるサービスです。これを使うことで、複数のショップの位置を同時に地図にプロットして見ることができます。
ユーザーの操作はとてもシンプルで、検索したいショップと都道府県を選択してボタンを押すと、選択された都道府県内にある店舗が地図上にマッピングされます。
機能としてはシングルページのwebサイトに近いくらいシンプルです。現在は主にセレクトショップを取り扱っており、以下のようなショップが登録されています。
ロゴ 名前 ロゴ 名前 BEAMS UNITED ARROWS UNITED ARROWS BEAUTY&amp;amp;YOUTH UNITED ARROWS green label relaxing URBAN RESEARCH URBAN RESEARCH DOORS SHIPS EDIFICE 417 EDIFICE JOURNAL STANDARD coen A.P.C. BShop SENSE OF PLACE by URBAN RESEARCH HARE RAGEBLUE GLOBAL WORK FREAK&#39;S STORE モチベーション まず服が好きなので、それに関わるサービスを作りたいなと思っていました。</description></item><item><title>ロゴの利用について少し調べて学んだこと</title><link>https://raahii.github.io/2016/11/17/204148/</link><pubDate>Thu, 17 Nov 2016 20:41:00 +0900</pubDate><guid>https://raahii.github.io/2016/11/17/204148/</guid><description>はじめに
今作っているちんけなwebサービスがほとんど出来上がって久しいきたのですが、よし公開するかと思った矢先、「サービスにメーカーのロゴが使われているってまずいのではないか」という疑問が湧き、何故今まで気づかなかったのかと愕然としました。
情報系の学部に通っていると知的財産権に関わる授業を受けますが、そういう系の授業は大体「睡眠薬がまかれたのではないか」という有様なので、内容についてはあまり記憶がないです笑。ただ、授業のおかげでそういうセンサーが少しでも芽生えたかもしれないことは良いことだと思います。
とにかく、いくらミニマムなサービスだとしても作り手としては留意すべき点だし、今後にも役立つだろうと思い少しだけ調べたので、簡単にまとめようと思います。
ロゴに関わる権利とは 私は最初、著作権が問題になるのではないかと思いました。ところが、調べてみるとどうやら商標法なるものが問題となるようでした。商標法とは、名の通り商標登録されたものを保護するための法であり、まさにロゴのことでした。
そもそも、商標法より先に例えばマクドナルドのページの利用規約などを見てみると、
5 . 知的財産権について
当サービスのすべてのコンテンツ（著作物、肖像、キャラクター、その他の一切の情報）は、当社もしくは、その委託先等が著作権等の知的財産権、使用権、その他の権利を有しています。著作権法で認められている範囲を超えての使用はお控え下さい。
6 . 禁止事項
当サービスのご利用にあたり、利用者は以下の行為を行わないものとします。違反した場合には、当サービスの利用を予告なくお断りさせていただく場合がありますので、あらかじめご了承下さい。
（中略）
(2) 特許権、実用新案権、商標権、意匠権、著作権、著作隣接権、肖像権、トレードシークレット、プライバシー、その他他者の権利、財産を侵害する行為、または侵害するおそれのある行為。
というような記載があります。これらはどのサイトでも必ずある記載で、「ア、オワタな」と一瞬思ったのですが、もう少し調べることにしました。
商標としての使用であるか否かが重要 調べ続けるうちに、弁護士・弁理士の方にアドバイスをもらえるQ&amp;amp;Aサイトのページがいくつかヒットしました。眺めていると「ロゴの使用が『商標としての使用』に該当しなければ問題ない」というような書き込みを発見。
詳しく調べると、「自他商品識別機能、出所表示機能等を有するような使用の仕方でなければその商標権を侵害しているとはいえない」ということがわかりました。
これを私の理解でざっくりいうと、商標法の侵害に当たるのは「他者が登録した商標を用いて、自分のサービス（商品）に付し、商標（めじるし）として使うこと」だと言えます。よって、ロゴを用いてサービスを作ったとしても、それが明らかにそのメーカーについて言及した記述や説明に過ぎないという場合は問題にならないということです。良かった…。
ロゴの著作権は？ とりあえず、明らかに商標法に抵触していることはなさそうだということがわかりましたが、それでは著作権はどうなのかと思ったのでこれも調べました。調べるとすぐにこんな記事が。
www.nikkeibp.co.jp
これによると、
著作権は、「感情または思想を創作的に表現したもの」で「文芸・学術・美術・音楽」に発生する権利で、著作物を創作した時点で著作者に自動的に発生するとされています。
（中略）
次に、商標について考えてみます。商標とは、シンボルマーク、ロゴタイプ、ロゴマーク、キャラクター、特徴的な商品のデザイン、看板など、企業の商品やサービスを他社と区別するためのもので、「企業の業務上の信用」を視覚化したものだととらえられています。商標法により、商標権の保護対象となるもので、商標権が登録され設定されている期間、専有的にこれを使用することができます。
「商標」には種類があり、扱いが異なります。アルファベットなどの文字で構成されるロゴタイプ、ロゴマークは、基本的に著作権は認められていません（「Asahiロゴマーク事件」）。ただし、商標のうち「シンボルマーク」にはその美的表現の程度により著作権が発生する場合があり、「キャラクター」には著作権が発生するとされています。熊本県のキャラクター「くまモン」は、著作権を買い上げた県が著作権使用料を無料にしたことで、さまざまな商品に展開されました（使用には県の許可が必要です）。
と書かれており、基本的には商標は著作権では保護できないため気にする必要はないようです。ただ、ロゴにキャラクターが載っている場合は注意が必要みたいですね。そんなに多いケースではないと思うのでひとまず安心です。
さいごに 商標について気になったので調べてみました。結果、ちゃんと商標法の条文を読んだわけではありませんが「どうやら問題なさそうだ」ぐらいはわかりました。
また、もし近い将来一エンジニアとして会社に勤めることになれば、真摯に取り組まなければならないテーマだということも感じました。これからも個人的に何かを作るときには、想像力を働かせて、少しでもその場で調べる癖を習慣にしていければと思いましたまる
参考 ホームページ上でのロゴ使用について・・・ - 特許・商標・著作権 - 専門家プロファイル
商標権侵害の考え方～アウトライン・「使用」の意義 | 弁護士法人クラフトマン IT・技術・特許・商標に強い法律事務所(東京丸の内・横浜)
ロゴマークに著作権はない──企業デザインと知的財産権 | 小さな組織の未来学</description></item><item><title>find | xargs grep を知る</title><link>https://raahii.github.io/2016/10/26/111052/</link><pubDate>Wed, 26 Oct 2016 11:10:00 +0900</pubDate><guid>https://raahii.github.io/2016/10/26/111052/</guid><description>はじめに
今回は頻繁につかうのに理解していないスクリプトがあるのでそれについて簡単に書こうと思います。そのスクリプトがコレです。
find . -name &#34;*.py&#34; -print0 | xargs -0 grep -i &#34;pync&#34; どんなことをするスクリプトかご存知ですか？
これはカレントディレクトリ以下にあるファイル*.pyの中からpyncという単語を含むものをリストアップするワンライナーです。すなわちこういうことです。
find . -name &#34;&amp;lt;検索対象のファイルネーム&amp;gt;&#34; -print0 | xargs -0 grep -i &#34;&amp;lt;探したい単語&amp;gt;&#34; 前から何度か使っていたものの、たまにしか使わないしすぐ忘れるだろうということで、すぐにシェルスクリプトファイルで保存し「ブラックボックス化」していました。最近になって特に多用するようになってきたのでちゃんと理解しようと思います。
解読 まず、パイプの左側のfindの部分について。
find . -name &#34;&amp;lt;検索対象のファイルネーム&amp;gt;&#34; -print0 言わずもがなfind .でカレントディレクトリ以下の全てのディレクトリ・ファイルを列挙します。よくファイルを探す時に使いますね。
そして -name &#34;*.&amp;lt;拡張子&amp;gt;&#34;とすることで検索対象のファイルを限定します。ファイルをたくさん持つディレクトリを検索するのであれば時間を短縮できます。加えてこれを使わずに実行すると、サブディレクトリもリストアップされてしまい、パイプ以降に渡されるとエラーを起こします。結果が見づらくなるのでそれを防止する効果もありますね。
最後に-print0ですがこれは全く使ったことのないオプションだったのでmanで見てみると、
-print0 This primary always evaluates to true. It prints the pathname of the current file to standard output, followed by an ASCII NUL character (character code 0).</description></item></channel></rss>